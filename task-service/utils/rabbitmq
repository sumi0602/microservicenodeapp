const amqplib = require("amqplib");

let channel = null;
let isConnecting = false;

const connectRabbitMQ = async (queueName, prefetchCount = 1, delay = 5000, onMessage) => {
  if (isConnecting) return { channel };
  isConnecting = true;

  try {
    const connection = await amqplib.connect("amqp://rabbitmq_node:5672");
    channel = await connection.createChannel();
    await channel.assertQueue(queueName);
    await channel.prefetch(prefetchCount);
    console.log(`✅ RabbitMQ connected and queue '${queueName}' asserted`);

    if (onMessage) {
      channel.consume(queueName, async (msg) => {
        if (msg !== null) {
          try {
            const data = JSON.parse(msg.content.toString());
            await onMessage(data);
            channel.ack(msg);
          } catch (err) {
            console.error("❌ Error processing message:", err.message);
            channel.nack(msg, false, false); // discard
          }
        }
      });
      console.log(`📡 Listening to '${queueName}' queue`);
    }

    return { channel }; // ✅ return the channel
  } catch (err) {
    console.error("❌ RabbitMQ connection error:", err.message);
    setTimeout(() => {
      isConnecting = false;
      connectRabbitMQ(queueName, prefetchCount, delay, onMessage);
    }, delay);
    return { channel: null }; // ✅ return null on failure
  }
};

const publishToQueue = async (queue, data) => {
  try {
    if (!channel) {
      console.warn("⚠️ RabbitMQ channel not ready. Message not sent.");
      return;
    }
    await channel.assertQueue(queue);
    channel.sendToQueue(queue, Buffer.from(JSON.stringify(data)));
    console.log(`📤 Message sent to queue '${queue}'`);
  } catch (err) {
    console.error("❌ Failed to publish to queue:", err.message);
  }
};

module.exports = { connectRabbitMQ, publishToQueue };
